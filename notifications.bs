<pre class="metadata">
Title: Notifications API
Group: WHATWG
H1: Notifications API
Shortname: notifications
Status: LS
No Editor: true
Abstract: This standard defines an API to display notifications to the end user, typically outside the top-level browsing context's viewport. It is designed to be compatible with existing notification systems, while remaining platform-independent.
Logo: https://resources.whatwg.org/logo-notifications.svg
!Version History: <a href="https://github.com/whatwg/notifications/commits">https://github.com/whatwg/notifications/commits</a> <a href="https://twitter.com/notifyapi">@notifyapi</a>
!Participate: <a href="https://github.com/whatwg/notifications/issues/new">file a bug</a> (<a href="https://github.com/whatwg/notifications/issues">open bugs</a>)
!Participate: <a href="https://whatwg.org/mailing-list">whatwg@whatwg.org</a> (<a href="https://whatwg.org/mailing-list#specs">archives</a>)
!Participate: <a href="http://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
Indent: 2
</pre>

<h2 id=terminology>Terminology</h2>

<p>Some terms used in this specification are defined in the DOM, Fetch,
HTML, IDL, URL and Vibration API Standards.
[[!DOM]]
[[!FETCH]]
[[!HTML]]
[[!WEBIDL]]
[[!URL]]
[[!VIBRATION]]


<h2 id=notifications>Notifications</h2>

<p>A <dfn>notification</dfn> is an abstract representation of an occurrence,
such as the delivery of a message.

<p>A <a>notification</a> has an associated
<dfn lt="notification title">title</dfn> which is a DOMString.

<p>A <a>notification</a> has an associated <dfn>body</dfn> which is a DOMString.

<p>A <a>notification</a> has an associated
<dfn lt="notification direction">direction</dfn> which is one of
<i>auto</i>, <i>ltr</i>, and <i>rtl</i>.

<p>A <a>notification</a> has an associated
<dfn lt="notification language">language</dfn> which is a DOMString
representing either a valid BCP 47 language tag or the empty string.

<p>A <a>notification</a> has an associated <dfn>tag</dfn> which is a DOMString.

<p>A <a>notification</a> has an associated <dfn>data</dfn>.

<p>A <a>notification</a> has an associated <dfn>origin</dfn>.

<p>A <a>notification</a> has an associated <dfn>renotify preference flag</dfn>
which is initially unset. When set indicates that the end user should be alerted
after the replace steps have run.

<p>A <a>notification</a> has an associated <dfn>silent preference flag</dfn>
which is initially unset. When set indicates that no sounds or vibrations should
be made.

<p>A <a>notification</a> has an associated <dfn>screen off preference flag</dfn>
which is initially unset. When set indicates that the screen of the device
should not be enabled.

<p>A <a>notification</a> has an associated <dfn>sticky preference flag</dfn>
which is initially unset. When set indicates that the end user should not be
able to easily clear the <a>notification</a> <span class=note>Only makes sense
for <a>persistent notifications</a>.

<p>A <a>notification</a> <em>can</em> have an associated <dfn>icon URL</dfn>,
<dfn>icon resource</dfn>, <dfn>sound URL</dfn>, <dfn>sound resource</dfn>,
<dfn>vibration pattern</dfn>, and <dfn>service worker registration</dfn>.

<p class=note>Developers are encouraged to not convey information through an
icon, sound, or vibration pattern that is not otherwise accessible to the end
user.

<p>A <dfn>non-persistent notification</dfn> is a <a>notification</a> without an
associated <a>service worker registration</a>.

<p>A <dfn>persistent notification</dfn> is a <a>notification</a> with an
associated <a>service worker registration</a>.

<!-- XXX https://html.spec.whatwg.org/#fingerprinting-vector -->

<hr>

<p>To <dfn>create a notification</dfn>, given a <var>title</var> and
<var>options</i>, run these steps:

<ol>
  <li><p>Let <var>notification</var> be a new <a>notification</a>.

  <li><p>If <var>options</var>'s <code>silent</code> is true, and either
  <var>options</var>'s <code>sound</code> is present or <var>options</var>'s
  <code>vibrate</code> is present, <a>throw</a> a <code>TypeError</code>
  exception.

  <li><p>If <var>options</var>'s <code>renotify</code> is true and
  <var>options</var>'s <code>tag</code> is the empty string, <a>throw</a> a
  <code>TypeError</code> exception.

  <li><p>Set <var>notification</var>'s <a>data</a> to a structured clone of
  <var>options</var>'s <code>data</code>. Rethrow any exceptions.

  <li><p>Set <var>notification</var>'s <a lt="notification title">title</a>
  to <var>option</var>'s <code>title</code>.

  <li><p>Set <var>notification</var>'s
  <a lt="notification direction">direction</a> to <var>options</var>'s
  <code>dir</code>.

  <li><p>If <var>options</var>'s <code>lang</code> is either a valid BCP 47
  language tag or the empty string, set <var>notification</var>'s
  <a lt="notification language">language</a> to <var>options</var>'s
  <code>lang</code>, and set it to the empty string otherwise. [[!LANG]]

  <li><p>Set <var>notification</var>'s <a>origin</a> to the
  <a>entry settings object</a>'s <a>origin</a>.

  <li><p>Set <var>notification</var>'s <a>body</a> to <var>options</var>'s
  <code>body</code>.

  <li><p>Set <var>notification</var>'s <a>tag</a> to <var>options</var>'s
  <code>tag</code>.

  <li><p>Let <var>baseURL</var> be the API base URL specified by the
  <a>entry settings object</a>. <span class=XXX>Or incumbent?</span>

  <li><p>If <var>options</var>'s <code>icon</code> is present, <a>parse</a> it
  using <var>baseURL</var>, and if that does not return failure, set
  <var>notification</var>'s <a>icon URL</a> to the return value. (Otherwise
  <a>icon URL</a> is not set.)

  <li><p>If <var>options</var>'s <code>sound</code> is present, <a>parse</a> it
  using <var>baseURL</var>, and if that does not return failure, set
  <var>notification</var>'s <a>sound URL</a> to the return value. (Otherwise
  <a>sound URL</a> is not set.)

  <li><p>If <var>options</var>'s <code>vibrate</code> is present,
  <a>validate and normalize</a> it and set <var>notification</var>'s
  <a>vibration pattern</a> to the return value. (Otherwise
  <a>vibration pattern</a> is not set.)

  <li><p>If <var>options</var>'s <code>renotify</code> is true, set
  <var>notification</var>'s <a>renotify preference flag</a>.

  <li><p>If <var>options</var>'s <code>silent</code> is true, set
  <var>notification</var>'s <a>silent preference flag</a>.

  <li><p>If <var>options</var>'s <code>noscreen</code> is true, set
  <var>notification</var>'s <a>screen off preference flag</a>.

  <li><p>If <var>options</var>'s <code>sticky</code> is true, set
  <var>notification</var>'s <a>sticky preference flag</a>.

  <li><p>Return <var>notification</var>.
</ol>


<h3 id=lifetime-and-ui-integrations>Lifetime and UI integration</h3>

<p>The user agent must keep a <dfn>list of notifications</dfn> that consists of
zero or more <a>notifications</a>.

<p>User agents should run the close steps for a
<a>non-persistent notification</a> a couple of seconds after they have been
<a lt="create a notification">created</a>.
<!--- XXX: Link close steps -->

<p>User agents should not display <a>non-persistent notification</a> in a
platform's "notification center" (if available).

<p>User agents should persist <a>persistent notifications</a> until they are
removed from the <a>list of notifications</a>.

<p class=example>A <a>persistent notification</a> could have the close() method
invoked of one of its Notification objects.
<!-- XXX: Link close() and Notification -->

<p>User agents should display <a>persistent notification</a> in a platform's
"notification center" (if available).


<h3 id=permission-model>Permission model</h3>

<p><a lt=notification>Notifications</a> can only be displayed if the user (or
user agent on behalf of the user) has granted <dfn>permission</dfn>. The
<a>permission</a> to show <a lt=notification>notifications</a> for a given
<a>origin</a> is one of three strings:

<dl>
  <dt>"<code>default</code>"
  <dd><p>This is equivalent to "<code>denied</code>", but the user has made no
  explicit choice thus far.

  <dt>"<code>denied</code>"
  <dd><p>This means the user does not want <a lt=notification>notifications</a>.

  <dt>"<code>granted</code>"
  <dd><p>This means <a lt=notification>notifications</a> can be displayed.
</dl>

<p class=note>There is no equivalent to "<code>default</code>"
meaning "<code>granted</code>". In that case
"<code>granted</code>" is simply returned as there would be no reason
for the application to ask for <a>permission</a>.


<h3 id=direction>Direction</h3>

<p>This section is written in terms equivalent to those used in the Rendering
section of HTML. [[!HTML]]

<!-- keep this in sync with
     https://html.spec.whatwg.org/multipage/rendering.html#text-rendered-in-native-user-interfaces -->

<p>User agents are expected to honor the Unicode semantics of the text of a
<a>notification</a>'s <a lt="notification title">title</a> and <a>body</a>. Each
is expected to be treated as an independent set of one or more bidirectional
algorithm paragraphs when displayed, as defined by the bidirectional algorithm's
rules P1, P2, and P3, including, for instance, supporting the paragraph-breaking
behaviour of U+000A LINE FEED (LF) characters. For each paragraph of the
<a lt="notification title">title</a> and <a>body</a>, the <a>notification</a>'s
<a lt="notification direction">direction</a> provides the higher-level override
of rules P2 and P3 if it has a value other than "<code>auto</code>". [[!BIDI]]


<h3 id=language>Language</h3>

<!-- keep this in sync with
     https://html.spec.whatwg.org/multipage/dom.html#attr-lang -->

<p>The <a>notification</a>'s <a lt="notification language">language</a> specifies
the primary language for the <a>notification</a>'s
<a lt="notification title">title</a> and <a>body</a>. Its value is a valid
BCP 47 language tag, or the empty string. The empty string indicates that the
primary language is unknown. [[!LANG]]


<h3 id=resources>Resources</h3>

<p>The <dfn>fetch steps</dfn> for a given <a>notification</a>
<var>notification</var> are:

<ol>
  <!-- XXX https://www.w3.org/Bugs/Public/show_bug.cgi?id=24055 -->
  <li><p>If the notification platform supports icons, <a>fetch</a>
  <var>notification</var>'s <a>icon URL</a>, if <a>icon URL</a> is set.

  <p>Then, <a>in parallel</a>:

  <ol>
    <li><p>Wait for the <a lt="concept response">response</a>.

    <li><p>If the <a lt="concept response">response</a>'s
    <a lt="concept internal response">internal response</a>'s
    <a lt="concept response type">type</a> is <i>default</i>, attempt to decode
    the resource as image.

    <li><p>If the image format is supported, set <var>notification</var>'s
    <a>icon resource</a> to the decoded resource. (Otherwise
    </var>notification</var> has no <a>icon resource</a>.)
  </ol>

  <li><p>If the notification platform supports sounds, <a>fetch</a>
  <var>notification</var>'s <a>sound URL</a>, if <a>sound URL</a> is set.

  <p>Then, <a>in parallel</a>:

  <ol>
    <li><p>Wait for the <a lt="concept response">response</a>.

    <li><p>If the <a lt="concept response">response</a>'s
    <a lt="concept internal response">internal response</a>'s
    <a lt="concept response type">type</a> is <i>default</i>, attempt to decode
    the resource as sound.
    <!-- XXX xref -->

    <li><p>If the sound format is supported, set <var>notification</var>'s
    <a>sound resource</a> to the decoded resource. (Otherwise
    <var>notification</var> has no sound resource.)
  </ol>
</ol>


<h3 id=showing-a-notification>Showing a notification</h3>

<p>The <dfn>show steps</dfn> for a given <a>notification</a>
<var>notification</var> are:

<ol>
  <li><p>If there is a <a>notification</a> in the <a>list of notifications</a>
  whose <a>tag</a> is not the empty string and equals <var>notification</var>'s
  <a>tag</a>, and whose <a>origin</a> is <a>same origin</a> with
  <var>notification</var>'s <a>origin</a>, run the replace steps for that
  <a>notification</a> and <var>notification</var>, and then terminate these
  steps.

  <li><p>Otherwise, run the display steps for <var>notification</var>.
</ol>
<!-- XXX: Link display steps and replace steps -->


<h3 id=activating-a-notification>Activating a notification</h3>

<p>When a <a>notification</a> <var>notification</var> is activated by the user,
assuming the underlying notification platform supports activation, the user
agent must (unless otherwise specified) run these steps:

<ol>
  <li><p>If <var>notification</var> is a <a>persistent notification</a>, run
  these substeps:

  <ol>
    <li><p>Let <var>callback</var> be an algorithm that when invoked with a
    <var>global</var>, fires a service worker notification event named
    <code>notificationclick</code> given <var>notification</var> on
    <var>global</var>.
    <!-- XXX link fires a service worker notification event -->

    <li><p>Then run <a>Handle Functional Event</a> with
    <var>notification</var>'s <a>service worker registration</a> and
    <var>callback</var>.
  </ol>

  <li><p>Otherwise, <a>queue a task</a> to run these substeps:

  <ol>
    <li><p><a>Fire an event</a> named <code>click</code> with its <code>
    <a lt="dom event cancelable">cancelable</a></code> attribute initialized to
    true on the Notification object representing <var>notification</var>.
    <!-- XXX link Notification -->

    <p class="note">User agents are encouraged to make <code>
    <a lt="dom window focus">window.focus()</a></code> work from within the
    event listener for the event named <code>click</code>.

    <li><p>If the <a>event</a>'s <a>canceled flag</a> is unset, the user agent
    should bring the <var>notification</var>'s related <a>browsing context</a>'s
    viewport into focus.
  </ol>
</ol>

<p class="note">Throughout the web platform "activate" is intentionally
misnamed as "click".


<h3 id=closing-a-notification>Closing a notification</h3>

<h3 id=displaying-notification>Displaying notifications</h3>

<h3 id=replacing-a-notification>Replacing a notification</h3>


<h2 id=api>API</h2>

<h3 id=garbage-collection>Garbage collection</h3>

<h3 id=constructors>Constructors</h3>

<h3 id=static-members>Static members</h3>

<h3 id=object-members>Object members</h3>

<h3 id=examples>Examples</h3>

<h4 id=using-events>Using events</h4>

<h4 id=tags-example>Using the <code>tag</code> member for multiple instances</h4>

<h4 id=using-the-tag-member-for-a-single-instance>Using the <code>tag</code> member for a single instance</h4>


<h2 id=service-worker-api>Service Worker API</h2>


<h2 id=acknowledgments class=no-num>Acknowledgments</h2>

<p>Thanks to
Aharon (Vladimir) Lanin,
Alex Russell,
Arkadiusz Michalski,
Boris Zbarsky,
David Håsäther,
Doug Turner,
Drew Wilson,
Edward O'Connor,
Frederick Hirsch,
Ian Hickson,
Jake Archibald,
James Graham,
John Mellor,
Jon Lee,
Jonas Sicking,
Michael Cooper,
Michael Henretty,
Olli Pettay,
Peter Beverloo,
Reuben Morais, and
Simon Pieters
for being awesome.

<p>This standard is written by
<a lang=nl href=//annevankesteren.nl/>Anne van Kesteren</a>
(<a href=//www.mozilla.org/>Mozilla</a>,
<a href=mailto:annevk@annevk.nl>annevk@annevk.nl</a>). An earlier iteration was written
by John Gregg (<a href=//www.google.com/>Google</a>,
<a href=mailto:johnnyg@google.com>johnnyg@google.com</a>).

<p>Per <a rel="license" href="//creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to
the extent possible under law, the editors have waived all copyright and related or
neighboring rights to this work.


<pre class="anchors">
urlPrefix: http://heycam.github.io/webidl/#dfn-; type: dfn
  text: throw
urlPrefix: https://html.spec.whatwg.org/multipage/
  urlPrefix: browsers.html; type: dfn
    text: browsing context
    text: same origin
  urlPrefix: infrastructure.html; type: dfn
    text: in parallel
  urlPrefix: interaction.html; type: dfn
    text: dom window focus
  urlPrefix: webappapis.html; type: dfn
    text: entry settings object
    text: queue a task
urlPrefix: https://url.spec.whatwg.org/; type: dfn
  text: parse
  text: validate and normalize
urlPrefix: https://fetch.spec.whatwg.org/; type: dfn
  text: concept internal response
  text: concept response
  text: concept response type
  text: fetch
urlPrefix: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/; type: dfn
  text: handle functional event
urlPrefix: https://dom.spec.whatwg.org/; type: dfn
  text: canceled flag
  text: dom event cancelable
  text: event
  text: fire an event
</pre>

<pre class="biblio">
{
    "DOM": {
        "authors": [
            "Anne van Kesteren",
            "Aryeh Gregor",
            "Ms2ger"
        ],
        "href": "https://dom.spec.whatwg.org/",
        "title": "DOM",
        "publisher": "WHATWG"
    },
    "WEBIDL": {
        "authors": [
            "Cameron McCormack",
            "Jonas Sicking"
        ],
        "href": "http://heycam.github.io/webidl/",
        "title": "Web IDL",
        "publisher": "W3C"
    },
    "URL": {
        "authors": [
            "Anne van Kesteren",
            "Sam Ruby"
        ],
        "href": "https://url.spec.whatwg.org/",
        "title": "URL",
        "publisher": "WHATWG"
    },
    "LANG": {
        "authors": [
            "Addison Phillips",
            "Mark Davis"
        ],
        "href": "http://tools.ietf.org/html/bcp47",
        "title": "Tags for Identifying Languages; Matching of Language Tags",
        "publisher": "IETF"
    }
}
</pre>